name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest requests
        
    # - name: Run unit tests
    #   run: |
    #     python -m pytest scripts/tests/ -v
        
    - name: Lint code
      run: |
        pip install flake8
        # Only check for critical errors in test files
        flake8 scripts/tests/ --max-line-length=120 --exclude=__pycache__,venv --ignore=E302,E305,W293,W291,W292

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Build Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: deployment/Dockerfile
        push: false
        tags: sentiment-analysis:latest
        load: true
        
    - name: Test Docker image
      run: |
        # Create necessary directories
        mkdir -p models/saved/sentiment_model
        mkdir -p models/saved/sentiment_tokenizer
        
        # Run container with test mode
        docker run --name test-container -d \
          -p 8000:8000 \
          -e TEST_MODE=true \
          -e SKIP_MODEL_LOAD=true \
          sentiment-analysis:latest
        
        # Wait for container to start
        sleep 10
        
        # Check container status
        docker ps
        
        # Check container logs
        docker logs test-container
        
        # Test health endpoint
        curl -X GET http://localhost:8000/health
        
        # Clean up
        docker stop test-container
        docker rm test-container 